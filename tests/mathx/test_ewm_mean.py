import datetime
import polars as pl
from polars.testing import assert_frame_equal
import polars_ts as ts  # noqa
import pytest


@pytest.fixture
def df() -> pl.LazyFrame:
    t = datetime.datetime(2024, 1, 1, 0).date()
    nrows = 48
    result = pl.LazyFrame(
        [
            pl.Series(
                "time",
                [
                    t + datetime.timedelta(days=days + 1)
                    for days in range(0, nrows * 2, 2)
                ],
            ),
            pl.Series(
                "item",
                ["A"] * (nrows // 2) + ["B"] * (nrows // 2),
                dtype=pl.Categorical,
            ),
            pl.Series("val1", list(range(0, nrows)), dtype=pl.Float64),
            pl.Series("val2", list(range(0, nrows)), dtype=pl.Float64) * 100.0,
        ]
    )

    return result


@pytest.fixture
def params() -> pl.LazyFrame:
    result = pl.LazyFrame(
        [
            pl.Series("test_case", ["1", "2", "3", "4", "5"], dtype=pl.Categorical),
            pl.Series("item", ["A", "A", "B", "B", "B"]),
            pl.Series("window_size", [1, 10, 1, 10, 50]),
            pl.Series("adjust", [True, True, False, False, False]),
            pl.Series(
                "null_strategy",
                [
                    "trim_start_n",
                    "trim_start_n",
                    "trim_start_n",
                    "trim_start_n",
                    "trim_start_n",
                ],
            ),
            pl.Series("null_param_1", [1, 10, 1, 10, 50]),
        ]
    ).with_columns(
        alpha=1 / pl.col("window_size"),
        window_size=pl.col("window_size").cast(pl.String).cast(pl.Categorical),
    )

    return result


def test_basic(df, params):
    result = df.mathx.ewm_mean(params=params).collect()
    # print(result.to_init_repr())

    expected_result = pl.DataFrame(
        [
            pl.Series(
                "time",
                [
                    datetime.date(2024, 1, 4),
                    datetime.date(2024, 1, 6),
                    datetime.date(2024, 1, 8),
                    datetime.date(2024, 1, 10),
                    datetime.date(2024, 1, 12),
                    datetime.date(2024, 1, 14),
                    datetime.date(2024, 1, 16),
                    datetime.date(2024, 1, 18),
                    datetime.date(2024, 1, 20),
                    datetime.date(2024, 1, 22),
                    datetime.date(2024, 1, 24),
                    datetime.date(2024, 1, 26),
                    datetime.date(2024, 1, 28),
                    datetime.date(2024, 1, 30),
                    datetime.date(2024, 2, 1),
                    datetime.date(2024, 2, 3),
                    datetime.date(2024, 2, 5),
                    datetime.date(2024, 2, 7),
                    datetime.date(2024, 2, 9),
                    datetime.date(2024, 2, 11),
                    datetime.date(2024, 2, 13),
                    datetime.date(2024, 2, 15),
                    datetime.date(2024, 2, 17),
                    datetime.date(2024, 1, 22),
                    datetime.date(2024, 1, 24),
                    datetime.date(2024, 1, 26),
                    datetime.date(2024, 1, 28),
                    datetime.date(2024, 1, 30),
                    datetime.date(2024, 2, 1),
                    datetime.date(2024, 2, 3),
                    datetime.date(2024, 2, 5),
                    datetime.date(2024, 2, 7),
                    datetime.date(2024, 2, 9),
                    datetime.date(2024, 2, 11),
                    datetime.date(2024, 2, 13),
                    datetime.date(2024, 2, 15),
                    datetime.date(2024, 2, 17),
                    datetime.date(2024, 1, 4),
                    datetime.date(2024, 1, 6),
                    datetime.date(2024, 1, 8),
                    datetime.date(2024, 1, 10),
                    datetime.date(2024, 1, 12),
                    datetime.date(2024, 1, 14),
                    datetime.date(2024, 1, 16),
                    datetime.date(2024, 1, 18),
                    datetime.date(2024, 1, 20),
                    datetime.date(2024, 1, 22),
                    datetime.date(2024, 1, 24),
                    datetime.date(2024, 1, 26),
                    datetime.date(2024, 1, 28),
                    datetime.date(2024, 1, 30),
                    datetime.date(2024, 2, 1),
                    datetime.date(2024, 2, 3),
                    datetime.date(2024, 2, 5),
                    datetime.date(2024, 2, 7),
                    datetime.date(2024, 2, 9),
                    datetime.date(2024, 2, 11),
                    datetime.date(2024, 2, 13),
                    datetime.date(2024, 2, 15),
                    datetime.date(2024, 2, 17),
                    datetime.date(2024, 1, 22),
                    datetime.date(2024, 1, 24),
                    datetime.date(2024, 1, 26),
                    datetime.date(2024, 1, 28),
                    datetime.date(2024, 1, 30),
                    datetime.date(2024, 2, 1),
                    datetime.date(2024, 2, 3),
                    datetime.date(2024, 2, 5),
                    datetime.date(2024, 2, 7),
                    datetime.date(2024, 2, 9),
                    datetime.date(2024, 2, 11),
                    datetime.date(2024, 2, 13),
                    datetime.date(2024, 2, 15),
                    datetime.date(2024, 2, 17),
                    datetime.date(2024, 2, 21),
                    datetime.date(2024, 2, 23),
                    datetime.date(2024, 2, 25),
                    datetime.date(2024, 2, 27),
                    datetime.date(2024, 2, 29),
                    datetime.date(2024, 3, 2),
                    datetime.date(2024, 3, 4),
                    datetime.date(2024, 3, 6),
                    datetime.date(2024, 3, 8),
                    datetime.date(2024, 3, 10),
                    datetime.date(2024, 3, 12),
                    datetime.date(2024, 3, 14),
                    datetime.date(2024, 3, 16),
                    datetime.date(2024, 3, 18),
                    datetime.date(2024, 3, 20),
                    datetime.date(2024, 3, 22),
                    datetime.date(2024, 3, 24),
                    datetime.date(2024, 3, 26),
                    datetime.date(2024, 3, 28),
                    datetime.date(2024, 3, 30),
                    datetime.date(2024, 4, 1),
                    datetime.date(2024, 4, 3),
                    datetime.date(2024, 4, 5),
                    datetime.date(2024, 3, 10),
                    datetime.date(2024, 3, 12),
                    datetime.date(2024, 3, 14),
                    datetime.date(2024, 3, 16),
                    datetime.date(2024, 3, 18),
                    datetime.date(2024, 3, 20),
                    datetime.date(2024, 3, 22),
                    datetime.date(2024, 3, 24),
                    datetime.date(2024, 3, 26),
                    datetime.date(2024, 3, 28),
                    datetime.date(2024, 3, 30),
                    datetime.date(2024, 4, 1),
                    datetime.date(2024, 4, 3),
                    datetime.date(2024, 4, 5),
                    datetime.date(2024, 2, 21),
                    datetime.date(2024, 2, 23),
                    datetime.date(2024, 2, 25),
                    datetime.date(2024, 2, 27),
                    datetime.date(2024, 2, 29),
                    datetime.date(2024, 3, 2),
                    datetime.date(2024, 3, 4),
                    datetime.date(2024, 3, 6),
                    datetime.date(2024, 3, 8),
                    datetime.date(2024, 3, 10),
                    datetime.date(2024, 3, 12),
                    datetime.date(2024, 3, 14),
                    datetime.date(2024, 3, 16),
                    datetime.date(2024, 3, 18),
                    datetime.date(2024, 3, 20),
                    datetime.date(2024, 3, 22),
                    datetime.date(2024, 3, 24),
                    datetime.date(2024, 3, 26),
                    datetime.date(2024, 3, 28),
                    datetime.date(2024, 3, 30),
                    datetime.date(2024, 4, 1),
                    datetime.date(2024, 4, 3),
                    datetime.date(2024, 4, 5),
                    datetime.date(2024, 3, 10),
                    datetime.date(2024, 3, 12),
                    datetime.date(2024, 3, 14),
                    datetime.date(2024, 3, 16),
                    datetime.date(2024, 3, 18),
                    datetime.date(2024, 3, 20),
                    datetime.date(2024, 3, 22),
                    datetime.date(2024, 3, 24),
                    datetime.date(2024, 3, 26),
                    datetime.date(2024, 3, 28),
                    datetime.date(2024, 3, 30),
                    datetime.date(2024, 4, 1),
                    datetime.date(2024, 4, 3),
                    datetime.date(2024, 4, 5),
                ],
                dtype=pl.Date,
            ),
            pl.Series(
                "item",
                [
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "A",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                    "B",
                ],
                dtype=pl.Categorical(ordering="physical"),
            ),
            pl.Series(
                "val1",
                [
                    1.0,
                    2.0,
                    3.0,
                    4.0,
                    5.0,
                    6.0,
                    7.0,
                    8.0,
                    9.0,
                    10.0,
                    11.0,
                    12.0,
                    13.0,
                    14.0,
                    15.0,
                    16.0,
                    17.0,
                    18.0,
                    19.0,
                    20.0,
                    21.0,
                    22.0,
                    23.0,
                    6.030559401413826,
                    6.723096350916429,
                    7.430633052136874,
                    8.152771967924405,
                    8.889097712214232,
                    9.639179635754012,
                    10.402574404917805,
                    11.178828546740721,
                    11.967480935461717,
                    12.768065198310564,
                    13.580112020938964,
                    14.403151335697835,
                    15.236714378829065,
                    16.080335605502007,
                    1.0,
                    2.0,
                    3.0,
                    4.0,
                    5.0,
                    6.0,
                    7.0,
                    8.0,
                    9.0,
                    10.0,
                    11.0,
                    12.0,
                    13.0,
                    14.0,
                    15.0,
                    16.0,
                    17.0,
                    18.0,
                    19.0,
                    20.0,
                    21.0,
                    22.0,
                    23.0,
                    4.138105960900001,
                    4.824295364810001,
                    5.541865828329001,
                    6.2876792454961015,
                    7.058911320946492,
                    7.8530201888518425,
                    8.667718169966658,
                    9.500946352969994,
                    10.350851717672995,
                    11.215766545905696,
                    12.094189891315127,
                    12.984770902183614,
                    13.886293811965253,
                    14.797664430768728,
                    25.0,
                    26.0,
                    27.0,
                    28.0,
                    29.0,
                    30.0,
                    31.0,
                    32.0,
                    33.0,
                    34.0,
                    35.0,
                    36.0,
                    37.0,
                    38.0,
                    39.0,
                    40.0,
                    41.0,
                    42.0,
                    43.0,
                    44.0,
                    45.0,
                    46.0,
                    47.0,
                    30.030559401413825,
                    30.72309635091643,
                    31.430633052136873,
                    32.15277196792441,
                    32.88909771221424,
                    33.63917963575401,
                    34.40257440491781,
                    35.178828546740725,
                    35.96748093546172,
                    36.768065198310566,
                    37.58011202093897,
                    38.403151335697835,
                    39.23671437882906,
                    40.08033560550201,
                    25.0,
                    26.0,
                    27.0,
                    28.0,
                    29.0,
                    30.0,
                    31.0,
                    32.0,
                    33.0,
                    34.0,
                    35.0,
                    36.0,
                    37.0,
                    38.0,
                    39.0,
                    40.0,
                    41.0,
                    42.0,
                    43.0,
                    44.0,
                    45.0,
                    46.0,
                    47.0,
                    28.138105960900006,
                    28.824295364810006,
                    29.54186582832901,
                    30.287679245496108,
                    31.0589113209465,
                    31.85302018885185,
                    32.66771816996666,
                    33.50094635297,
                    34.350851717673,
                    35.2157665459057,
                    36.09418989131513,
                    36.98477090218362,
                    37.88629381196526,
                    38.79766443076874,
                ],
                dtype=pl.Float64,
            ),
            pl.Series(
                "val2",
                [
                    100.0,
                    200.0,
                    300.0,
                    400.0,
                    500.0,
                    600.0,
                    700.0,
                    800.0,
                    900.0,
                    1000.0,
                    1100.0,
                    1200.0,
                    1300.0,
                    1400.0,
                    1500.0,
                    1600.0,
                    1700.0,
                    1800.0,
                    1900.0,
                    2000.0,
                    2100.0,
                    2200.0,
                    2300.0,
                    603.0559401413826,
                    672.3096350916429,
                    743.0633052136874,
                    815.2771967924406,
                    888.9097712214232,
                    963.9179635754011,
                    1040.2574404917807,
                    1117.8828546740724,
                    1196.748093546172,
                    1276.8065198310567,
                    1358.0112020938966,
                    1440.3151335697837,
                    1523.6714378829067,
                    1608.0335605502007,
                    100.0,
                    200.0,
                    300.0,
                    400.0,
                    500.0,
                    600.0,
                    700.0,
                    800.0,
                    900.0,
                    1000.0,
                    1100.0,
                    1200.0,
                    1300.0,
                    1400.0,
                    1500.0,
                    1600.0,
                    1700.0,
                    1800.0,
                    1900.0,
                    2000.0,
                    2100.0,
                    2200.0,
                    2300.0,
                    413.8105960900001,
                    482.4295364810001,
                    554.1865828329001,
                    628.7679245496101,
                    705.8911320946492,
                    785.3020188851842,
                    866.7718169966658,
                    950.0946352969993,
                    1035.0851717672995,
                    1121.5766545905694,
                    1209.4189891315125,
                    1298.4770902183614,
                    1388.6293811965252,
                    1479.7664430768727,
                    2500.0,
                    2600.0,
                    2700.0,
                    2800.0,
                    2900.0,
                    3000.0,
                    3100.0,
                    3200.0,
                    3300.0,
                    3400.0,
                    3500.0,
                    3600.0,
                    3700.0,
                    3800.0,
                    3900.0,
                    4000.0,
                    4100.0,
                    4200.0,
                    4300.0,
                    4400.0,
                    4500.0,
                    4600.0,
                    4700.0,
                    3003.0559401413825,
                    3072.3096350916426,
                    3143.063305213687,
                    3215.27719679244,
                    3288.909771221423,
                    3363.917963575401,
                    3440.25744049178,
                    3517.882854674072,
                    3596.7480935461717,
                    3676.8065198310564,
                    3758.011202093897,
                    3840.315133569784,
                    3923.671437882907,
                    4008.0335605502005,
                    2500.0,
                    2600.0,
                    2700.0,
                    2800.0,
                    2900.0,
                    3000.0,
                    3100.0,
                    3200.0,
                    3300.0,
                    3400.0,
                    3500.0,
                    3600.0,
                    3700.0,
                    3800.0,
                    3900.0,
                    4000.0,
                    4100.0,
                    4200.0,
                    4300.0,
                    4400.0,
                    4500.0,
                    4600.0,
                    4700.0,
                    2813.81059609,
                    2882.4295364810005,
                    2954.1865828329005,
                    3028.7679245496106,
                    3105.8911320946495,
                    3185.3020188851847,
                    3266.771816996666,
                    3350.0946352969995,
                    3435.0851717672995,
                    3521.5766545905694,
                    3609.4189891315127,
                    3698.4770902183614,
                    3788.629381196525,
                    3879.7664430768727,
                ],
                dtype=pl.Float64,
            ),
            pl.Series(
                "test_case",
                [
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "2",
                    "2",
                    "2",
                    "2",
                    "2",
                    "2",
                    "2",
                    "2",
                    "2",
                    "2",
                    "2",
                    "2",
                    "2",
                    "2",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "4",
                    "4",
                    "4",
                    "4",
                    "4",
                    "4",
                    "4",
                    "4",
                    "4",
                    "4",
                    "4",
                    "4",
                    "4",
                    "4",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "2",
                    "2",
                    "2",
                    "2",
                    "2",
                    "2",
                    "2",
                    "2",
                    "2",
                    "2",
                    "2",
                    "2",
                    "2",
                    "2",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "3",
                    "4",
                    "4",
                    "4",
                    "4",
                    "4",
                    "4",
                    "4",
                    "4",
                    "4",
                    "4",
                    "4",
                    "4",
                    "4",
                    "4",
                ],
                dtype=pl.Categorical(ordering="physical"),
            ),
            pl.Series(
                "window_size",
                [
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                    "10",
                ],
                dtype=pl.Categorical(ordering="physical"),
            ),
        ]
    ).select(result.columns)

    assert_frame_equal(result, expected_result)
